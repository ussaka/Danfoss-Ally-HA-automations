blueprint:
  name: Danfoss Ally time updater
  description: >
    ## Danfoss Ally time updater  

    **Version: 1.0.2**  


    Periodically update Danfoss Ally eTRV's time with z2m.  

  domain: automation
  author: Kasperi Kiviluoma

  input:
    ally_etrv:
      name: Ally eTRV
      selector:
        device:
          entity:
            - domain:
                - climate
          multiple: false
    scheduler:
      name: Update schedule
      description: Recommended to run once a week
      selector:
        entity:
          domain: schedule
    dst_start:
      name: DST start time
      description: Set one minute before real start time, e.g. 03:00 --> 02:59
      selector:
        entity:
          domain: input_datetime
    dst_stop:
      name: DST stop time
      selector:
        entity:
          domain: input_datetime

variables:
  ally_etrv: !input ally_etrv
  dst_start: !input dst_start
  dst_stop: !input dst_stop

triggers:
  - trigger: state
    entity_id:
      - !input scheduler
    from: "off"
    to: "on"

actions:
  - action: mqtt.publish
    data:
      topic: zigbee2mqtt/{{ device_attr(ally_etrv, 'name')}}/set
      # Epoch is 00:00:00 1.1.2000 UTC instead of normal linux epoch
      # as_timestamp will return timeZone adjusted timestamp instead of UTC
      # Only write to bit 1 of the timeStatus will result in a change (0x02)
      payload: |-
        {"write":{"cluster":"genTime","options":{},"payload":{
          "time":{{ (utcnow().timestamp()-(as_timestamp('2000-01-01T00:00:00')+now().utcoffset().total_seconds()))|int }},
          "timeStatus":2,
          "timeZone":{{now().utcoffset().total_seconds()|int}},
          "dstStart":{{ (state_attr(dst_start, 'timestamp')-as_timestamp('2000-01-01T00:00:00'))|int }},
          "dstEnd":{{ (state_attr(dst_stop, 'timestamp')-as_timestamp('2000-01-01T00:00:00'))|int }},
          "dstShift":3600
        }}}
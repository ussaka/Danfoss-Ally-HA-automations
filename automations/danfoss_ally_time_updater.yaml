blueprint:
  name: Danfoss Ally time updater
  description: >
    ## Danfoss Ally time updater  

    **Version: 1.2.2**  

    Periodically update Danfoss Ally eTRV's time with z2m.  
    Need help? [Click here](https://github.com/ussaka/Danfoss-Ally-HA-automations?tab=readme-ov-file#time-updater-automation)

  domain: automation
  author: Kasperi Kiviluoma

  input:
    ally_etrv:
      name: Ally eTRV
      selector:
        device:
          entity:
            - domain:
                - climate
          multiple: true
    scheduler:
      name: Update schedule
      description: Recommended to run once a week
      selector:
        entity:
          domain: schedule
    dst_start:
      name: DST start time
      description: >
        Set one minute before real start time, e.g. 03:00 --> 02:59.
        The set day is automatically updated to the current year's last Sunday of the set month.
      selector:
        entity:
          domain: input_datetime
    dst_stop:
      name: DST stop time
      description: >
        The set day is automatically updated to the current year's last Sunday of the set month.
      selector:
        entity:
          domain: input_datetime

variables:
  ally_etrv: !input ally_etrv
  dst_start: !input dst_start
  dst_stop: !input dst_stop

triggers:
  - trigger: state
    entity_id:
      - !input scheduler
    from: "off"
    to: "on"

actions:
  - action: input_datetime.set_datetime
    target:
      entity_id: !input dst_start
    data:
      date: >
        {% set year = now().year %}
        {% set month = state_attr(dst_start, 'month') %}
        {% set last_day_of_month = (now().replace(year=year, month=month, day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1) %}
        {% set days_to_subtract = (last_day_of_month.weekday() + 1) % 7 %}
        {% set last_sunday = last_day_of_month - timedelta(days=days_to_subtract) %}
        {{ last_sunday.date() }}

  - action: input_datetime.set_datetime
    target:
      entity_id: !input dst_stop
    data:
      date: >
        {% set year = now().year %}
        {% set month = state_attr(dst_stop, 'month') %}
        {% set last_day_of_month = (now().replace(year=year, month=month, day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1) %}
        {% set days_to_subtract = (last_day_of_month.weekday() + 1) % 7 %}
        {% set last_sunday = last_day_of_month - timedelta(days=days_to_subtract) %}
        {{ last_sunday.date() }}

  - repeat:
      for_each: "{{ ally_etrv }}"
      sequence:
        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/{{ device_attr(repeat.item, 'name')}}/set
            # Epoch is 00:00:00 1.1.2000 UTC instead of normal linux epoch
            # as_timestamp will return timeZone adjusted timestamp instead of UTC
            # Only write to bit 1 of the timeStatus will result in a change (0x02)
            payload: |-
              {"write":{"cluster":"genTime","options":{},"payload":{
                "time":{{ (utcnow().timestamp()-(as_timestamp('2000-01-01T00:00:00')+now().utcoffset().total_seconds()))|int }},
                "timeStatus":2,
                "timeZone":{{now().utcoffset().total_seconds()|int}},
                "dstStart":{{ (state_attr(dst_start, 'timestamp')-as_timestamp('2000-01-01T00:00:00'))|int }},
                "dstEnd":{{ (state_attr(dst_stop, 'timestamp')-as_timestamp('2000-01-01T00:00:00'))|int }},
                "dstShift":3600
              }}}
        - delay:
            seconds: 5
